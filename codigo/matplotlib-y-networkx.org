#+title: Matplotlib y networkx

#+property: header-args:ipython :exports both :cache yes :session mplynx :results raw drawer

#+begin_src ipython
import matplotlib.pyplot as plt
import networkx as nx
from random import random
from scipy.spatial.distance import euclidean
#+end_src

#+RESULTS[83aa7d7f5733239210c1d5cbb71aeecd7b133e39]:
:results:
# Out[18]:
:end:

#+begin_src ipython
plt.plot([1,1,2],[1,2,3],'ro') 
plt.axis([0,3,0,4])
plt.show()
#+end_src

#+RESULTS:
:results:
# Out[2]:
[[file:./obipy-resources/b4Bo1U.png]]
:end:

#+begin_src ipython
plt.plot([1,1,2],[1,2,3], color='blue') 
plt.axis([0,3,0,4])
plt.show()
#+end_src

#+RESULTS[50f90e9296084fca5a98737ed576f08db90bdea4]:
:results:
# Out[3]:
[[file:./obipy-resources/5C5mzp.png]]
:end:

#+begin_src ipython
def puntos_en_el_plano(n):
    listax = []
    listay = []
    for i in range(n):
        listax.append(random())
        listay.append(random())
    return listax, listay

def dibujo_de_puntos(listax, listay):
    plt.plot(listax, listay, 'ro')
    plt.axis([-0.1, 1.1, -0.1, 1.1])
    plt.gca().set_aspect('equal')
    plt.show()
#+end_src

#+RESULTS[1997a034cffb374e442f3b6f3fff85cdc23f38b7]:
:results:
# Out[6]:
:end:

#+begin_src ipython
coords_x, coords_y = puntos_en_el_plano(5)
coords_x, coords_y
#+end_src

#+RESULTS[80dc648424a6b8f4af481a3e3ce9ccb42cadfc6b]:
:results:
# Out[8]:
#+BEGIN_EXAMPLE
  ([0.5151418507064135,
  0.3383420696406737,
  0.3275218074590789,
  0.4518866871653453,
  0.29803362286636925],
  [0.7574430709673299,
  0.38382169855827775,
  0.8151386769747289,
  0.2719698861047989,
  0.8088944122485549])
#+END_EXAMPLE
:end:

#+begin_src ipython
dibujo_de_puntos(coords_x, coords_y)
#+end_src

#+RESULTS[c16e27e53daed564bfcdf246dc857a481fb2e1a8]:
:results:
# Out[9]:
[[file:./obipy-resources/xgEvim.png]]
:end:

#+begin_src ipython
dibujo_de_puntos(*puntos_en_el_plano(500))
#+end_src

#+RESULTS[f9940a57fc1dc7368f549234c00a53be5a2f1226]:
:results:
# Out[43]:
[[file:./obipy-resources/5n31FQ.png]]
:end:

#+begin_src ipython
a = (0, 0)
b = (3, 6)
euclidean(a, b)  
#+end_src

#+RESULTS[8d475c709eaf724f36bdae2ff8521507d20fba11]:
:results:
# Out[44]:
: 6.708203932499369
:end:

#+begin_src ipython
def grafica_rips(listax, listay, epsilon):
    g = nx.Graph()
    n = len(listax)
    vertices = []
    aristas = []
    for i in range(n):
        vertices.append((listax[i], listay[i]))
    for i in range(n):
        for j in range(i+1, n):
            if euclidean(vertices[i], vertices[j]) <= epsilon:
                aristas.append((vertices[i], vertices[j]))
    g.add_nodes_from(vertices)
    g.add_edges_from(aristas)
    return g
#+end_src

#+RESULTS[47085d6cdac2fd304856214b28449b5ac8bab11d]:
:results:
# Out[19]:
:end:

#+begin_src ipython
g = grafica_rips(coords_x, coords_y, 0.5)
nx.draw(g, with_labels=True)
#+end_src

#+RESULTS[b8c7673b6caf07b0872be065d6bb19515ef90147]:
:results:
# Out[21]:
[[file:./obipy-resources/oBmKBY.png]]
:end:

#+begin_src ipython
def dibujo_grafica_rips(listax, listay, epsilon):
    plt.figure(1, figsize = (8, 8))
    g = grafica_rips(listax, listay, epsilon)
    for e in g.edges():
        u=e[0]
        v=e[1]
        plt.plot([u[0], v[0]], [u[1], v[1]], color='blue')
    plt.plot(listax, listay, 'ro')
    plt.axis([-0.1, 1.1, -0.1, 1.1])
    plt.gca().set_aspect('equal')
    plt.show()
#+end_src

#+RESULTS[caa85534be54a27e26add25d2827766b42719196]:
:results:
# Out[38]:
:end:

#+begin_src ipython
dibujo_grafica_rips(coords_x, coords_y, 0.5)
#+end_src

#+RESULTS[06a1f27ce4780cb5f707e14e62e7b6fd0fc51988]:
:results:
# Out[39]:
[[file:./obipy-resources/AorviP.png]]
:end:

#+begin_src ipython
coords_x, coords_y = puntos_en_el_plano(50)
#+end_src

#+RESULTS[51d7551021a531c0ef4f7df2fa636924c4880f08]:
:results:
# Out[45]:
:end:


#+begin_src ipython
dibujo_grafica_rips(coords_x, coords_y, .2)
#+end_src

#+RESULTS[06bcc058f48b248534474f9fbd5e776d60ade9a9]:
:results:
# Out[51]:
[[file:./obipy-resources/Wk4Q1x.png]]
:end:


* COMMENT

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
